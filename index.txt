<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🚀 Prompt Engineering Masterclass</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <!-- FIXED: Using consistent FontAwesome 6.4.0 for all icons -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary: #6366f1;
            --primary-dark: #4f46e5;
            --secondary: #8b5cf6;
            --accent: #f59e0b;
            --success: #10b981;
            --danger: #ef4444;
            --dark: #0f172a;
            --dark-light: #1e293b;
            --light: #f8fafc;
            --text: #334155;
            --text-light: #64748b;
            --border: #e2e8f0;
            --glass: rgba(255, 255, 255, 0.1);
            --shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }

        [data-theme="dark"] {
            --primary: #818cf8;
            --primary-dark: #6366f1;
            --secondary: #a78bfa;
            --accent: #fbbf24;
            --success: #34d399;
            --danger: #f87171;
            --dark: #0f172a;
            --dark-light: #1e293b;
            --light: #1e293b;
            --text: #e2e8f0;
            --text-light: #94a3b8;
            --border: #334155;
            --glass: rgba(0, 0, 0, 0.2);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        html {
            scroll-behavior: smooth;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Inter', Roboto, sans-serif;
            line-height: 1.7;
            color: var(--text);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            min-height: 100vh;
            transition: all 0.3s ease;
        }

        [data-theme="dark"] body {
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%);
        }

        /* FIXED: Enhanced floating navigation with progress bar */
        .floating-nav {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            display: flex;
            gap: 10px;
            align-items: center;
        }

        /* FIXED: Progress bar instead of percentage */
        .progress-container {
            background: var(--glass);
            backdrop-filter: blur(20px);
            border: 1px solid var(--border);
            border-radius: 50px;
            padding: 8px 16px;
            box-shadow: var(--shadow);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .progress-bar {
            width: 60px;
            height: 6px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 3px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, var(--primary), var(--secondary));
            width: 0%;
            transition: width 0.3s ease;
            border-radius: 3px;
        }

        .progress-text {
            font-size: 0.8rem;
            font-weight: 600;
            color: var(--text);
            min-width: 35px;
        }

        /* FIXED: Theme toggle with proper icons */
        .theme-toggle {
            background: var(--glass);
            backdrop-filter: blur(20px);
            border: 1px solid var(--border);
            border-radius: 50px;
            padding: 12px;
            color: var(--text);
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: var(--shadow);
            font-size: 1.1rem;
            width: 45px;
            height: 45px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .theme-toggle:hover {
            transform: scale(1.1);
            background: var(--primary);
            color: white;
        }

        .hero {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .hero::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><radialGradient id="grad" cx="50%" cy="50%" r="50%"><stop offset="0%" stop-color="white" stop-opacity="0.1"/><stop offset="100%" stop-color="white" stop-opacity="0"/></radialGradient></defs><circle cx="20" cy="20" r="2" fill="url(%23grad)"/><circle cx="80" cy="30" r="1" fill="url(%23grad)"/><circle cx="40" cy="70" r="1.5" fill="url(%23grad)"/><circle cx="90" cy="80" r="1" fill="url(%23grad)"/><circle cx="10" cy="90" r="1" fill="url(%23grad)"/></svg>') repeat;
            animation: float 20s linear infinite;
        }

        @keyframes float {
            0% { transform: translateY(0px) rotate(0deg); }
            100% { transform: translateY(-100px) rotate(360deg); }
        }

        .hero-content {
            position: relative;
            z-index: 2;
            max-width: 800px;
            padding: 2rem;
        }

        /* FIXED: Two-line header layout for desktop */
        .hero h1 {
            font-weight: 800;
            background: linear-gradient(135deg, #ffffff, #e2e8f0);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 1rem;
            animation: fadeInUp 1s ease-out;
        }

        /* Desktop: Two lines */
        @media (min-width: 768px) {
            .hero h1 {
                font-size: clamp(2.5rem, 5vw, 3.5rem);
                line-height: 1.1;
            }
            
            .hero h1::after {
                content: "\APrompt Engineering\AMasterclass";
                white-space: pre;
            }
            
            .hero h1 .hero-title-text {
                display: none;
            }
        }

        /* Mobile: Single line */
        @media (max-width: 767px) {
            .hero h1 {
                font-size: clamp(2rem, 8vw, 2.5rem);
            }
            
            .hero h1::after {
                display: none;
            }
        }

        .hero-subtitle {
            font-size: clamp(1.1rem, 2.5vw, 1.5rem);
            color: rgba(255, 255, 255, 0.9);
            margin-bottom: 2rem;
            animation: fadeInUp 1s ease-out 0.2s both;
        }

        .hero-buttons {
            display: flex;
            gap: 1rem;
            justify-content: center;
            flex-wrap: wrap;
            animation: fadeInUp 1s ease-out 0.4s both;
        }

        .btn {
            padding: 1rem 2rem;
            border-radius: 50px;
            font-size: 1.1rem;
            font-weight: 600;
            text-decoration: none;
            transition: all 0.3s ease;
            cursor: pointer;
            border: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            position: relative;
            overflow: hidden;
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .btn:hover::before {
            left: 100%;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--accent), #ea580c);
            color: white;
            box-shadow: 0 4px 15px rgba(245, 158, 11, 0.4);
        }

        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(245, 158, 11, 0.6);
        }

        .btn-secondary {
            background: var(--glass);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
        }

        .btn-secondary:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-3px);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 2rem;
        }

        .main-content {
            background: var(--light);
            min-height: 100vh;
            position: relative;
            border-radius: 40px 40px 0 0;
            margin-top: -40px;
            z-index: 10;
            box-shadow: var(--shadow);
            transition: all 0.3s ease;
        }

        .content-header {
            padding: 4rem 0 2rem;
            text-align: center;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            border-radius: 40px 40px 0 0;
            position: relative;
            overflow: hidden;
        }

        .content-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 20"><defs><linearGradient id="wave" x1="0%" y1="0%" x2="100%" y2="0%"><stop offset="0%" stop-color="white" stop-opacity="0.1"/><stop offset="50%" stop-color="white" stop-opacity="0.05"/><stop offset="100%" stop-color="white" stop-opacity="0.1"/></linearGradient></defs><path d="M0,10 Q25,0 50,10 T100,10 L100,20 L0,20 Z" fill="url(%23wave)"/></svg>') repeat-x;
            animation: wave 3s ease-in-out infinite;
        }

        @keyframes wave {
            0%, 100% { transform: translateX(0); }
            50% { transform: translateX(-25px); }
        }

        /* FIXED: Navigation tabs with proper scrolling */
        .content-nav {
            background: var(--light);
            padding: 1rem 0;
            border-bottom: 1px solid var(--border);
            position: sticky;
            top: 0;
            z-index: 100;
            backdrop-filter: blur(20px);
        }

        .nav-tabs {
            display: flex;
            justify-content: center;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .nav-tab {
            padding: 0.75rem 1.5rem;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
            border: 2px solid transparent;
            background: white;
            color: var(--text);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        [data-theme="dark"] .nav-tab {
            background: var(--dark-light);
        }

        .nav-tab:hover {
            background: var(--primary);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(99, 102, 241, 0.3);
        }

        .nav-tab.active {
            background: var(--primary);
            color: white;
            box-shadow: 0 4px 12px rgba(99, 102, 241, 0.3);
        }

        .content-body {
            padding: 2rem;
        }

        /* FIXED: Collapsible sections */
        .section {
            margin-bottom: 2rem;
            opacity: 1;
            transform: translateY(0);
            transition: all 0.6s ease;
        }

        .section-header {
            background: white;
            border-radius: 15px;
            padding: 1.5rem;
            box-shadow: var(--shadow);
            border: 1px solid var(--border);
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        [data-theme="dark"] .section-header {
            background: var(--dark-light);
        }

        .section-header:hover {
            transform: translateY(-2px);
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.15);
        }

        .section-title {
            color: var(--primary);
            font-size: 1.8rem;
            font-weight: 700;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .section-toggle {
            font-size: 1.5rem;
            color: var(--primary);
            transition: transform 0.3s ease;
        }

        .section.collapsed .section-toggle {
            transform: rotate(-90deg);
        }

        .section-content {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.5s ease-out;
        }

        .section.expanded .section-content {
            max-height: none;
        }

        .section-card {
            background: white;
            border-radius: 20px;
            padding: 2rem;
            box-shadow: var(--shadow);
            border: 1px solid var(--border);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .section-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
        }

        [data-theme="dark"] .section-card {
            background: var(--dark-light);
            border-color: var(--border);
        }

        .section h3 {
            color: var(--secondary);
            font-size: 1.5rem;
            margin-bottom: 1rem;
            margin-top: 2rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .interactive-template {
            background: linear-gradient(135deg, #f0f9ff, #e0f2fe);
            border: 2px solid var(--primary);
            border-radius: 15px;
            padding: 2rem;
            margin: 2rem 0;
        }

        [data-theme="dark"] .interactive-template {
            background: linear-gradient(135deg, #1e293b, #334155);
        }

        .template-form {
            display: grid;
            gap: 1rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .form-label {
            font-weight: 600;
            color: var(--primary);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .form-input {
            padding: 1rem;
            border: 2px solid var(--border);
            border-radius: 10px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: white;
            color: var(--text);
        }

        [data-theme="dark"] .form-input {
            background: var(--dark);
            border-color: var(--border);
        }

        .form-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
        }

        .form-textarea {
            min-height: 100px;
            resize: vertical;
        }

        .generated-prompt {
            background: var(--dark);
            color: #e2e8f0;
            padding: 1.5rem;
            border-radius: 10px;
            margin-top: 1rem;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            white-space: pre-wrap;
            border: 2px solid var(--primary);
        }

        .example-carousel {
            position: relative;
            margin: 2rem 0;
        }

        .carousel-container {
            overflow: hidden;
            border-radius: 15px;
            box-shadow: var(--shadow);
        }

        .carousel-track {
            display: flex;
            transition: transform 0.5s ease;
        }

        .carousel-item {
            flex: 0 0 100%;
            background: linear-gradient(135deg, #ecfdf5, #d1fae5);
            padding: 2rem;
            border-left: 4px solid var(--success);
        }

        [data-theme="dark"] .carousel-item {
            background: linear-gradient(135deg, #1e293b, #334155);
        }

        .carousel-controls {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-top: 1rem;
        }

        .carousel-btn {
            background: var(--primary);
            color: white;
            border: none;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .carousel-btn:hover {
            transform: scale(1.1);
            background: var(--primary-dark);
        }

        .carousel-indicators {
            display: flex;
            justify-content: center;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background: var(--text-light);
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .indicator.active {
            background: var(--primary);
            transform: scale(1.2);
        }

        .code-block {
            background: var(--dark);
            color: #e2e8f0;
            padding: 1.5rem;
            border-radius: 10px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 0.9rem;
            line-height: 1.6;
            margin: 1rem 0;
            overflow-x: auto;
            position: relative;
            border: 1px solid var(--border);
        }

        .code-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid #374151;
        }

        .copy-btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.8rem;
            transition: all 0.3s ease;
        }

        .copy-btn:hover {
            background: var(--primary-dark);
        }

        .advanced-techniques {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            margin: 2rem 0;
        }

        .technique-card {
            background: white;
            border-radius: 15px;
            padding: 1.5rem;
            border: 2px solid var(--border);
            transition: all 0.3s ease;
            cursor: pointer;
        }

        [data-theme="dark"] .technique-card {
            background: var(--dark-light);
        }

        .technique-card:hover {
            border-color: var(--primary);
            transform: translateY(-5px);
            box-shadow: var(--shadow);
        }

        .technique-icon {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.5rem;
            margin-bottom: 1rem;
        }

        .checklist {
            background: linear-gradient(135deg, #f0f9ff, #e0f2fe);
            border-radius: 15px;
            padding: 1.5rem;
            margin: 1rem 0;
            border-left: 4px solid var(--primary);
        }

        [data-theme="dark"] .checklist {
            background: linear-gradient(135deg, #1e293b, #334155);
        }

        .checklist ul {
            list-style: none;
            margin-left: 0;
        }

        .checklist li {
            padding: 0.5rem 0;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            transition: all 0.3s ease;
        }

        .checklist li::before {
            content: "✅";
            font-size: 1.2rem;
        }

        .checklist li:hover {
            background: rgba(99, 102, 241, 0.1);
            border-radius: 5px;
            padding-left: 0.5rem;
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(15, 23, 42, 0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .loading-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .spinner {
            width: 60px;
            height: 60px;
            border: 4px solid var(--glass);
            border-top: 4px solid var(--primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .toast {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%) translateY(-100px);
            background: var(--success);
            color: white;
            padding: 1rem 2rem;
            border-radius: 50px;
            font-weight: 600;
            z-index: 10000;
            transition: all 0.3s ease;
            opacity: 0;
        }

        .toast.show {
            transform: translateX(-50%) translateY(0);
            opacity: 1;
        }

        @media (max-width: 768px) {
            .floating-nav {
                top: 10px;
                right: 10px;
                gap: 5px;
            }
            
            .progress-container {
                padding: 6px 12px;
            }
            
            .progress-bar {
                width: 40px;
            }
            
            .hero-buttons {
                flex-direction: column;
                align-items: center;
            }
            
            .btn {
                width: 100%;
                max-width: 300px;
            }
            
            .content-body {
                padding: 1rem;
            }
            
            .section-card {
                padding: 1.5rem;
            }
            
            .advanced-techniques {
                grid-template-columns: 1fr;
            }
            
            .nav-tabs {
                flex-direction: column;
                align-items: center;
            }
            
            .carousel-controls {
                gap: 0.5rem;
            }
        }

        .fade-in {
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.6s ease;
        }

        .fade-in.visible {
            opacity: 1;
            transform: translateY(0);
        }
    </style>
</head>
<body>
    <div class="loading-overlay" id="loadingOverlay">
        <div class="spinner"></div>
    </div>

    <div class="toast" id="toast"></div>

    <!-- FIXED: Enhanced floating navigation with progress bar -->
    <div class="floating-nav">
        <div class="progress-container">
            <div class="progress-bar">
                <div class="progress-fill" id="progressFill"></div>
            </div>
            <span class="progress-text" id="progressText">0%</span>
        </div>
        <!-- FIXED: Theme toggle with proper icons -->
        <button class="theme-toggle" id="themeToggle" onclick="toggleTheme()" title="Toggle Dark/Light Mode">
            🌙
        </button>
    </div>

    <section class="hero" id="hero">
        <div class="hero-content">
            <!-- FIXED: Two-line header for desktop -->
            <h1><span class="hero-title-text">🚀 Prompt Engineering Masterclass</span></h1>
            <p class="hero-subtitle">Master the art of AI communication with advanced techniques, interactive tools, and real-world examples</p>
            <div class="hero-buttons">
                <button class="btn btn-primary" onclick="generateAdvancedPDF()">
                    <i class="fas fa-download"></i> Download Complete Guide
                </button>
                <a href="#content" class="btn btn-secondary">
                    <i class="fas fa-rocket"></i> Start Learning
                </a>
            </div>
        </div>
    </section>

    <main class="main-content" id="content">
        <header class="content-header">
            <div class="container">
                <h2><i class="fas fa-target"></i> Complete Interactive Learning Experience</h2>
                <p>From basics to advanced techniques with hands-on tools</p>
            </div>
        </header>

        <!-- FIXED: Navigation with proper section linking -->
        <nav class="content-nav">
            <div class="container">
                <div class="nav-tabs">
                    <div class="nav-tab active" onclick="toggleSection('foundations')">
                        <i class="fas fa-foundation"></i> Foundation
                    </div>
                    <div class="nav-tab" onclick="toggleSection('crafting')">
                        <i class="fas fa-paint-brush"></i> Crafting
                    </div>
                    <div class="nav-tab" onclick="toggleSection('advanced')">
                        <i class="fas fa-brain"></i> Advanced
                    </div>
                    <div class="nav-tab" onclick="toggleSection('examples')">
                        <i class="fas fa-lightbulb"></i> Examples
                    </div>
                    <div class="nav-tab" onclick="toggleSection('tools')">
                        <i class="fas fa-toolbox"></i> Tools
                    </div>
                </div>
            </div>
        </nav>

        <div class="content-body">
            <div class="container">

                <!-- FIXED: Collapsible Foundations Section -->
                <div id="foundations-section" class="section expanded">
                    <div class="section-header" onclick="toggleSection('foundations')">
                        <h2 class="section-title">
                            <i class="fas fa-foundation"></i> ✨ Foundation — Core Principles
                        </h2>
                        <i class="fas fa-chevron-down section-toggle"></i>
                    </div>
                    <div class="section-content">
                        <div class="section-card">
                            <h3><i class="fas fa-robot"></i> 🤖 What is a Prompt?</h3>
                            <p>A prompt is a short input (instructions + context) given to a Large Language Model (LLM) to produce a desired response.</p>
                            
                            <div class="code-block">
                                <div class="code-header">
                                    <span>Prompt Flow</span>
                                    <button class="copy-btn" onclick="copyToClipboard(this)">Copy</button>
                                </div>
                                <pre>Prompt → LLM Processing → Response</pre>
                            </div>

                            <h3><i class="fas fa-target"></i> 🎯 Core Principles</h3>
                            <p>Prompting controls token probability distributions through:</p>
                            <ul>
                                <li><strong>Clear instructions</strong> - Be specific about what you want</li>
                                <li><strong>Relevant context</strong> - Provide necessary background information</li>
                                <li><strong>Proper structure</strong> - Organize your prompt logically</li>
                                <li><strong>Examples</strong> - Show the model what good output looks like</li>
                            </ul>

                            <div class="interactive-template">
                                <h4><i class="fas fa-lightbulb"></i> Key Insight</h4>
                                <p><strong>AI is not creativity itself — it magnifies human creativity.</strong></p>
                                <div style="background: linear-gradient(135deg, #fbbf24, #f59e0b); color: white; border: none; padding: 1rem; border-radius: 10px; text-align: center; font-weight: 600; font-size: 1.2rem; margin: 1rem 0;">
                                    <i class="fas fa-plus"></i> <strong>Formula: AI + Human = Awesome!</strong>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- FIXED: Collapsible Crafting Section -->
                <div id="crafting-section" class="section collapsed">
                    <div class="section-header" onclick="toggleSection('crafting')">
                        <h2 class="section-title">
                            <i class="fas fa-paint-brush"></i> 🎯 Crafting — Prompt Mastery
                        </h2>
                        <i class="fas fa-chevron-down section-toggle"></i>
                    </div>
                    <div class="section-content">
                        <div class="section-card">
                            <h3><i class="fas fa-book-open"></i> 📝 The Storytelling Approach</h3>
                            <p>Think of prompt crafting like cooking:</p>
                            <ul>
                                <li><strong>Ingredients</strong> = Context and information</li>
                                <li><strong>Recipe Steps</strong> = Clear instructions</li>
                                <li><strong>Taste Testing</strong> = Iterative refinement</li>
                            </ul>

                            <div class="advanced-techniques">
                                <div class="technique-card">
                                    <div class="technique-icon">
                                        <i class="fas fa-eye"></i>
                                    </div>
                                    <h4>KISS Principle</h4>
                                    <p>Keep It Simple & Structured. Generic prompts lead to generic answers.</p>
                                </div>
                                <div class="technique-card">
                                    <div class="technique-icon">
                                        <i class="fas fa-target"></i>
                                    </div>
                                    <h4>Precision Targeting</h4>
                                    <p>Well-organized inputs consistently produce high-quality outputs.</p>
                                </div>
                                <div class="technique-card">
                                    <div class="technique-icon">
                                        <i class="fas fa-sync"></i>
                                    </div>
                                    <h4>Iterative Process</h4>
                                    <p>Draft → Test → Refine → Repeat until perfect.</p>
                                </div>
                            </div>

                            <h3><i class="fas fa-tools"></i> Interactive C.O.S.T.A.R.S Template Builder</h3>
                            <div class="interactive-template">
                                <div class="template-form">
                                    <div class="form-group">
                                        <label class="form-label">
                                            <i class="fas fa-info-circle"></i> Context (Background/Scope)
                                        </label>
                                        <textarea class="form-input form-textarea" id="context" placeholder="Describe the background information and scope..."></textarea>
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">
                                            <i class="fas fa-bullseye"></i> Objective (Goal/Task)
                                        </label>
                                        <textarea class="form-input form-textarea" id="objective" placeholder="What do you want to achieve?"></textarea>
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">
                                            <i class="fas fa-user-tie"></i> Style/Role (Persona)
                                        </label>
                                        <input type="text" class="form-input" id="style" placeholder="e.g., Expert Data Scientist, Creative Writer...">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">
                                            <i class="fas fa-volume-up"></i> Tone
                                        </label>
                                        <input type="text" class="form-input" id="tone" placeholder="e.g., Professional, Casual, Humorous...">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">
                                            <i class="fas fa-users"></i> Audience
                                        </label>
                                        <input type="text" class="form-input" id="audience" placeholder="e.g., Beginners, Executives, Technical team...">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">
                                            <i class="fas fa-file-alt"></i> Response Format
                                        </label>
                                        <input type="text" class="form-input" id="response" placeholder="e.g., Markdown, Bullet points, Step-by-step...">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">
                                            <i class="fas fa-list-ol"></i> Steps/Constraints
                                        </label>
                                        <textarea class="form-input form-textarea" id="steps" placeholder="Any specific steps or constraints..."></textarea>
                                    </div>
                                    <button class="btn btn-primary" onclick="generatePrompt()" style="margin-top: 1rem;">
                                        <i class="fas fa-magic"></i> Generate Prompt
                                    </button>
                                </div>
                                <div class="generated-prompt" id="generatedPrompt" style="display: none;"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- FIXED: Collapsible Advanced Section -->
                <div id="advanced-section" class="section collapsed">
                    <div class="section-header" onclick="toggleSection('advanced')">
                        <h2 class="section-title">
                            <i class="fas fa-brain"></i> 🧠 Advanced — Expert Techniques
                        </h2>
                        <i class="fas fa-chevron-down section-toggle"></i>
                    </div>
                    <div class="section-content">
                        <div class="section-card">
                            <h3><i class="fas fa-link"></i> Chain-of-Thought (CoT)</h3>
                            <p>Ask the model to show intermediate reasoning steps. This dramatically improves accuracy for complex tasks.</p>
                            
                            <div class="code-block">
                                <div class="code-header">
                                    <span>CoT Example</span>
                                    <button class="copy-btn" onclick="copyToClipboard(this)">Copy</button>
                                </div>
                                <pre>Problem: A company's revenue increased by 25% in Q1, then decreased by 15% in Q2. 
If they started with $1M, what's their Q2 revenue?

Think step-by-step:
1) Q1 revenue = $1M × 1.25 = $1.25M
2) Q2 revenue = $1.25M × 0.85 = $1.0625M
3) Final answer: $1,062,500</pre>
                            </div>

                            <h3><i class="fas fa-network-wired"></i> Advanced Prompting Arsenal</h3>
                            <div class="advanced-techniques">
                                <div class="technique-card" onclick="showTechniqueDetail('skeleton')">
                                    <div class="technique-icon">
                                        <i class="fas fa-bone"></i>
                                    </div>
                                    <h4>Skeleton of Thought</h4>
                                    <p>Create a basic structure first, then fill in details progressively.</p>
                                </div>
                                <div class="technique-card" onclick="showTechniqueDetail('tree')">
                                    <div class="technique-icon">
                                        <i class="fas fa-sitemap"></i>
                                    </div>
                                    <h4>Tree of Thought</h4>
                                    <p>Explore multiple reasoning paths simultaneously for complex problems.</p>
                                </div>
                                <div class="technique-card" onclick="showTechniqueDetail('meta')">
                                    <div class="technique-icon">
                                        <i class="fas fa-layer-group"></i>
                                    </div>
                                    <h4>Meta-Prompting</h4>
                                    <p>Create prompts that help generate better prompts.</p>
                                </div>
                                <div class="technique-card" onclick="showTechniqueDetail('persona')">
                                    <div class="technique-icon">
                                        <i class="fas fa-masks-theater"></i>
                                    </div>
                                    <h4>Multi-Persona</h4>
                                    <p>Have multiple experts collaborate on a single problem.</p>
                                </div>
                                <div class="technique-card" onclick="showTechniqueDetail('least')">
                                    <div class="technique-icon">
                                        <i class="fas fa-stairs"></i>
                                    </div>
                                    <h4>Least-to-Most</h4>
                                    <p>Break complex problems into simpler sub-problems.</p>
                                </div>
                                <div class="technique-card" onclick="showTechniqueDetail('stepback')">
                                    <div class="technique-icon">
                                        <i class="fas fa-step-backward"></i>
                                    </div>
                                    <h4>Step-Back</h4>
                                    <p>Ask broader questions to gain better perspective.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- FIXED: Collapsible Examples Section -->
                <div id="examples-section" class="section collapsed">
                    <div class="section-header" onclick="toggleSection('examples')">
                        <h2 class="section-title">
                            <i class="fas fa-lightbulb"></i> 💡 Examples — Real-World Cases
                        </h2>
                        <i class="fas fa-chevron-down section-toggle"></i>
                    </div>
                    <div class="section-content">
                        <div class="section-card">
                            <div class="example-carousel">
                                <div class="carousel-container">
                                    <div class="carousel-track" id="carouselTrack">
                                        <div class="carousel-item">
                                            <h4><i class="fas fa-briefcase"></i> Business Strategy Prompt</h4>
                                            <div class="code-block">
                                                <div class="code-header">
                                                    <span>Product Manager Brief</span>
                                                    <button class="copy-btn" onclick="copyToClipboard(this)">Copy</button>
                                                </div>
                                                <pre>You are a Senior Product Manager at a Fortune 500 tech company.

Context:
- Product: AI-powered project management tool for remote teams
- Market: North America & Europe, companies 50-500 employees
- Competition: Asana, Monday.com, Notion

Objective:
Create a comprehensive product brief including:
- 5 core features with technical requirements
- Success metrics (KPIs) for each feature
- 3 major user pain points we solve
- Go-to-market strategy outline

Style: Executive-level, data-driven
Tone: Confident but realistic
Audience: C-level executives and investors

Response Format:
- Executive Summary (3 sentences)
- Features & KPIs (table format)
- Market Analysis (bullet points)
- Next Steps (numbered list)

Constraints:
- Keep under 2 pages
- Include at least 3 market statistics
- Reference competitor analysis</pre>
                                            </div>
                                        </div>
                                        <div class="carousel-item">
                                            <h4><i class="fas fa-calculator"></i> Educational Content</h4>
                                            <div class="code-block">
                                                <div class="code-header">
                                                    <span>Math Tutor with CoT</span>
                                                    <button class="copy-btn" onclick="copyToClipboard(this)">Copy</button>
                                                </div>
                                                <pre>You are an experienced math tutor specializing in calculus.

Context: Student struggling with derivative applications

Problem: A ball is thrown upward with initial velocity 64 ft/s from a height of 6 ft. 
The height function is h(t) = -16t² + 64t + 6

Find: When does the ball reach maximum height and what is that height?

Instructions:
1. Show all work step-by-step
2. Explain the reasoning behind each step
3. Use simple language a high school student can understand
4. Include a quick verification of the answer
5. Add a real-world interpretation

Teaching Style: Patient, encouraging, methodical
Response Format: Step-by-step solution with explanations</pre>
                                            </div>
                                        </div>
                                        <div class="carousel-item">
                                            <h4><i class="fas fa-palette"></i> Creative Design</h4>
                                            <div class="code-block">
                                                <div class="code-header">
                                                    <span>Multi-Persona Design Review</span>
                                                    <button class="copy-btn" onclick="copyToClipboard(this)">Copy</button>
                                                </div>
                                                <pre>You are a design review panel consisting of three experts:
👤 Expert A: Senior UX Researcher (10+ years experience)
👤 Expert B: Visual Design Lead (specializes in mobile apps)  
👤 Expert C: Accessibility Consultant (WCAG expert)

Context: 
Mobile banking app onboarding flow redesign
- 8 screens currently, users drop off at screen 3 (45% exit rate)
- Target: Young professionals aged 25-35
- Must comply with banking security standards

Task for each expert:
1. Identify top 3 UX issues from your specialty
2. Provide specific, actionable recommendations
3. Estimate implementation difficulty (Low/Medium/High)

Final Step: 
Synthesize all feedback into 5 prioritized improvements

Format: 
- Individual expert analysis
- Consolidated recommendations
- Implementation roadmap

Tone: Professional, constructive, specific</pre>
                                            </div>
                                        </div>
                                        <div class="carousel-item">
                                            <h4><i class="fas fa-code"></i> Technical Documentation</h4>
                                            <div class="code-block">
                                                <div class="code-header">
                                                    <span>API Documentation</span>
                                                    <button class="copy-btn" onclick="copyToClipboard(this)">Copy</button>
                                                </div>
                                                <pre>You are a Senior Technical Writer specializing in API documentation.

Context:
- REST API for e-commerce platform
- Audience: Frontend developers (intermediate level)
- Integration: Payment processing endpoints

Objective:
Create comprehensive documentation for the /payments/process endpoint

Include:
- Endpoint overview and purpose
- Authentication requirements  
- Request/response examples (JSON)
- Error codes and handling
- Rate limiting information
- SDK code samples (JavaScript, Python)
- Common integration patterns

Style: Clear, concise, developer-friendly
Format: Markdown with proper headings
Tone: Professional but approachable

Special Requirements:
- Include security best practices
- Add troubleshooting section
- Provide real-world use cases</pre>
                                            </div>
                                        </div>
                                        <div class="carousel-item">
                                            <h4><i class="fas fa-chart-line"></i> Data Analysis</h4>
                                            <div class="code-block">
                                                <div class="code-header">
                                                    <span>Business Intelligence Report</span>
                                                    <button class="copy-btn" onclick="copyToClipboard(this)">Copy</button>
                                                </div>
                                                <pre>You are a Senior Data Analyst at a SaaS company.

Context:
- Q3 2024 user behavior data analysis
- Product: Project management software
- Focus: Feature adoption and user retention

Dataset Summary:
- 50K active users
- 12 core features tracked
- 90-day retention period
- Segmented by plan type (Free, Pro, Enterprise)

Analysis Requirements:
1. Feature adoption rates by user segment
2. Correlation between feature usage and retention  
3. Identify power user behavior patterns
4. Churn prediction indicators
5. Revenue impact analysis

Deliverable:
Executive summary with actionable insights

Format:
- Key findings (bullet points)
- Data visualizations (describe charts needed)
- Strategic recommendations  
- Next steps for product team

Tone: Data-driven, confident, business-focused</pre>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="carousel-controls">
                                    <button class="carousel-btn" onclick="previousExample()">
                                        <i class="fas fa-chevron-left"></i>
                                    </button>
                                    <button class="carousel-btn" onclick="nextExample()">
                                        <i class="fas fa-chevron-right"></i>
                                    </button>
                                </div>
                                <div class="carousel-indicators" id="carouselIndicators"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- FIXED: Collapsible Tools Section -->
                <div id="tools-section" class="section collapsed">
                    <div class="section-header" onclick="toggleSection('tools')">
                        <h2 class="section-title">
                            <i class="fas fa-toolbox"></i> 🛠️ Tools — Checklists & Library
                        </h2>
                        <i class="fas fa-chevron-down section-toggle"></i>
                    </div>
                    <div class="section-content">
                        <div class="section-card">
                            <h3><i class="fas fa-rocket"></i> Workflow Optimization</h3>
                            <div class="checklist">
                                <h4>🚀 Professional Workflow Checklist</h4>
                                <ol>
                                    <li>Write first draft using C.O.S.T.A.R.S framework</li>
                                    <li>Test with target LLM → collect initial outputs</li>
                                    <li>Analyze results: format, tone, accuracy, completeness</li>
                                    <li>Refine iteratively: add examples, constraints, personas</li>
                                    <li>A/B test variations for consistency</li>
                                    <li>Document successful patterns in your Prompt Library</li>
                                    <li>Create templates for recurring use cases</li>
                                    <li>Set up feedback loops for continuous improvement</li>
                                </ol>
                            </div>

                            <h3><i class="fas fa-check-double"></i> Quality Assurance</h3>
                            <div class="checklist">
                                <h4>✅ Master Quality Checklist</h4>
                                <ul>
                                    <li><strong>Clarity:</strong> Is the objective crystal clear and unambiguous?</li>
                                    <li><strong>Context:</strong> Have you provided sufficient background information?</li>
                                    <li><strong>Role:</strong> Is the AI persona/expertise level specified?</li>
                                    <li><strong>Audience:</strong> Is the target audience clearly defined?</li>
                                    <li><strong>Format:</strong> Is the desired output format explicitly requested?</li>
                                    <li><strong>Examples:</strong> Are there 1-3 high-quality examples provided?</li>
                                    <li><strong>Constraints:</strong> Are limitations and requirements specified?</li>
                                    <li><strong>Logic:</strong> Is chain-of-thought requested for complex reasoning?</li>
                                    <li><strong>Validation:</strong> Have you tested with multiple inputs?</li>
                                    <li><strong>Documentation:</strong> Is this saved in your reusable library?</li>
                                </ul>
                            </div>

                            <h3><i class="fas fa-exclamation-triangle"></i> Common Pitfalls to Avoid</h3>
                            <div class="advanced-techniques">
                                <div class="technique-card">
                                    <div class="technique-icon" style="background: linear-gradient(135deg, var(--danger), #dc2626);">
                                        <i class="fas fa-times"></i>
                                    </div>
                                    <h4>Vague Instructions</h4>
                                    <p><strong>Wrong:</strong> "Make it better"<br><strong>Right:</strong> "Improve readability by adding subheadings and bullet points"</p>
                                </div>
                                <div class="technique-card">
                                    <div class="technique-icon" style="background: linear-gradient(135deg, var(--danger), #dc2626);">
                                        <i class="fas fa-question"></i>
                                    </div>
                                    <h4>Missing Context</h4>
                                    <p><strong>Wrong:</strong> "Write a report"<br><strong>Right:</strong> "Write a quarterly sales report for the executive team"</p>
                                </div>
                                <div class="technique-card">
                                    <div class="technique-icon" style="background: linear-gradient(135deg, var(--danger), #dc2626);">
                                        <i class="fas fa-eye-slash"></i>
                                    </div>
                                    <h4>Poor Examples</h4>
                                    <p><strong>Wrong:</strong> Low-quality or irrelevant examples<br><strong>Right:</strong> 2-3 perfect examples that demonstrate desired output</p>
                                </div>
                            </div>

                            <h3><i class="fas fa-database"></i> Building Your Prompt Library (IPL)</h3>
                            <p>Create a systematic library of your best prompts for maximum productivity:</p>
                            
                            <div class="interactive-template">
                                <h4><i class="fas fa-file-plus"></i> Prompt Library Template</h4>
                                <div class="code-block">
                                    <div class="code-header">
                                        <span>IPL Entry Template</span>
                                        <button class="copy-btn" onclick="copyToClipboard(this)">Copy</button>
                                    </div>
                                    <pre>📁 PROMPT TITLE: [Descriptive name]
🎯 CATEGORY: [Business/Creative/Technical/Educational]
📝 INTENT: [What this prompt accomplishes]
🎭 PERSONA: [Role/expertise required]
🎪 USE CASE: [When to use this prompt]
📊 SUCCESS RATE: [Track performance]
📚 CONTEXT TEMPLATE: [Fill-in-the-blank background]
🎯 OBJECTIVE TEMPLATE: [Customizable goals]
📋 FORMAT: [Standard output format]
💡 EXAMPLES: [2-3 perfect examples]
🔧 TUNING NOTES: [What works/doesn't work]
📈 VARIATIONS: [Different versions for different needs]
🕐 LAST UPDATED: [Keep it fresh]</pre>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </main>

    <script>
        // Global variables
        let currentExample = 0;
        const totalExamples = 5;
        let isGenerating = false;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            initializeCarousel();
            initializeProgressTracker();
            loadSavedTheme();
            loadFormData();
            
            // Hide loading overlay
            setTimeout(() => {
                document.getElementById('loadingOverlay').classList.remove('active');
            }, 1000);
        });

        // FIXED: Theme toggle with proper icons
        function toggleTheme() {
            const body = document.body;
            const themeToggle = document.getElementById('themeToggle');
            const isDark = body.getAttribute('data-theme') === 'dark';
            
            if (isDark) {
                body.removeAttribute('data-theme');
                themeToggle.innerHTML = '🌙';
                themeToggle.title = 'Switch to Dark Mode';
                localStorage.setItem('theme', 'light');
            } else {
                body.setAttribute('data-theme', 'dark');
                themeToggle.innerHTML = '☀️';
                themeToggle.title = 'Switch to Light Mode';
                localStorage.setItem('theme', 'dark');
            }
        }

        // Load saved theme
        function loadSavedTheme() {
            const savedTheme = localStorage.getItem('theme');
            if (savedTheme === 'dark') {
                document.body.setAttribute('data-theme', 'dark');
                document.getElementById('themeToggle').innerHTML = '☀️';
                document.getElementById('themeToggle').title = 'Switch to Light Mode';
            }
        }

        // FIXED: Section toggle functionality for collapsible sections
        function toggleSection(sectionName) {
            const section = document.getElementById(`${sectionName}-section`);
            const allSections = document.querySelectorAll('.section');
            const allTabs = document.querySelectorAll('.nav-tab');
            
            // Remove active class from all tabs
            allTabs.forEach(tab => tab.classList.remove('active'));
            
            // Add active class to clicked tab
            const clickedTab = event.target.closest('.nav-tab') || 
                              Array.from(allTabs).find(tab => tab.textContent.toLowerCase().includes(sectionName));
            if (clickedTab) {
                clickedTab.classList.add('active');
            }
            
            if (section.classList.contains('expanded')) {
                // Collapse the section
                section.classList.remove('expanded');
                section.classList.add('collapsed');
            } else {
                // Collapse all other sections
                allSections.forEach(s => {
                    s.classList.remove('expanded');
                    s.classList.add('collapsed');
                });
                
                // Expand the clicked section
                section.classList.remove('collapsed');
                section.classList.add('expanded');
                
                // Smooth scroll to section
                setTimeout(() => {
                    section.scrollIntoView({ 
                        behavior: 'smooth',
                        block: 'start'
                    });
                }, 100);
            }
        }

        // Prompt generator
        function generatePrompt() {
            const context = document.getElementById('context').value;
            const objective = document.getElementById('objective').value;
            const style = document.getElementById('style').value;
            const tone = document.getElementById('tone').value;
            const audience = document.getElementById('audience').value;
            const response = document.getElementById('response').value;
            const steps = document.getElementById('steps').value;
            
            if (!context || !objective) {
                showToast('Please fill in at least Context and Objective fields', 'error');
                return;
            }
            
            const generatedPrompt = `You are ${style || 'an expert assistant'}.

Context:
${context}

Objective:
${objective}

${style ? `Style/Role: ${style}` : ''}
${tone ? `Tone: ${tone}` : ''}
${audience ? `Audience: ${audience}` : ''}
${response ? `Response Format: ${response}` : ''}
${steps ? `Steps/Constraints:\n${steps}` : ''}

Please provide a comprehensive response that addresses all requirements above.`;

            const promptContainer = document.getElementById('generatedPrompt');
            promptContainer.textContent = generatedPrompt;
            promptContainer.style.display = 'block';
            
            // Smooth scroll to generated prompt
            promptContainer.scrollIntoView({ behavior: 'smooth' });
            
            showToast('✨ Prompt generated successfully!', 'success');
        }

        // Carousel functionality
        function initializeCarousel() {
            const indicators = document.getElementById('carouselIndicators');
            indicators.innerHTML = ''; // Clear existing indicators
            for (let i = 0; i < totalExamples; i++) {
                const indicator = document.createElement('div');
                indicator.className = `indicator ${i === 0 ? 'active' : ''}`;
                indicator.onclick = () => goToExample(i);
                indicators.appendChild(indicator);
            }
        }

        function nextExample() {
            currentExample = (currentExample + 1) % totalExamples;
            updateCarousel();
        }

        function previousExample() {
            currentExample = (currentExample - 1 + totalExamples) % totalExamples;
            updateCarousel();
        }

        function goToExample(index) {
            currentExample = index;
            updateCarousel();
        }

        function updateCarousel() {
            const track = document.getElementById('carouselTrack');
            const indicators = document.querySelectorAll('.indicator');
            
            if (track) {
                track.style.transform = `translateX(-${currentExample * 100}%)`;
            }
            
            indicators.forEach((indicator, index) => {
                indicator.classList.toggle('active', index === currentExample);
            });
        }

        // Auto-advance carousel
        setInterval(() => {
            const examplesSection = document.getElementById('examples-section');
            if (examplesSection && examplesSection.classList.contains('expanded')) {
                nextExample();
            }
        }, 10000);

        // Copy to clipboard functionality
        function copyToClipboard(button) {
            const codeBlock = button.closest('.code-block');
            const preElement = codeBlock.querySelector('pre');
            const text = preElement.textContent;
            
            navigator.clipboard.writeText(text).then(() => {
                const originalText = button.innerHTML;
                button.innerHTML = '<i class="fas fa-check"></i> Copied!';
                button.style.background = 'var(--success)';
                
                setTimeout(() => {
                    button.innerHTML = originalText;
                    button.style.background = 'var(--primary)';
                }, 2000);
            }).catch(() => {
                showToast('Failed to copy to clipboard', 'error');
            });
        }

        // FIXED: Enhanced progress tracker with visual progress bar
        function initializeProgressTracker() {
            const progressFill = document.getElementById('progressFill');
            const progressText = document.getElementById('progressText');
            
            window.addEventListener('scroll', () => {
                const winScroll = document.body.scrollTop || document.documentElement.scrollTop;
                const height = document.documentElement.scrollHeight - document.documentElement.clientHeight;
                const scrolled = Math.min((winScroll / height) * 100, 100);
                
                if (progressFill && progressText) {
                    progressFill.style.width = scrolled + '%';
                    progressText.textContent = Math.round(scrolled) + '%';
                }
            });
        }

        // Toast notification system
        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            if (!toast) return;
            
            toast.textContent = message;
            toast.className = `toast show ${type}`;
            
            if (type === 'error') {
                toast.style.background = 'var(--danger)';
            } else {
                toast.style.background = 'var(--success)';
            }
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        // Advanced PDF generation
        function generateAdvancedPDF() {
            if (isGenerating) return;
            
            isGenerating = true;
            const loadingOverlay = document.getElementById('loadingOverlay');
            loadingOverlay.classList.add('active');
            
            // Simulate processing time for better UX
            setTimeout(() => {
                try {
                    const { jsPDF } = window.jspdf;
                    const doc = new jsPDF();
                    
                    // Set up styling
                    doc.setFont("helvetica");
                    let yPosition = 20;
                    const pageHeight = doc.internal.pageSize.height;
                    const margin = 20;
                    const lineHeight = 7;
                    
                    function addText(text, fontSize, isBold = false, color = [0, 0, 0]) {
                        if (yPosition > pageHeight - 30) {
                            doc.addPage();
                            yPosition = 20;
                        }
                        
                        doc.setFontSize(fontSize);
                        doc.setTextColor(color[0], color[1], color[2]);
                        doc.setFont("helvetica", isBold ? "bold" : "normal");
                        
                        const splitText = doc.splitTextToSize(text, 170);
                        doc.text(splitText, margin, yPosition);
                        yPosition += splitText.length * lineHeight + 3;
                    }
                    
                    function addSection(title, content, isExample = false) {
                        yPosition += 5;
                        addText(title, 14, true, isExample ? [16, 185, 129] : [99, 102, 241]);
                        yPosition += 3;
                        
                        if (Array.isArray(content)) {
                            content.forEach(item => {
                                if (item === "") {
                                    yPosition += 3;
                                } else {
                                    addText(item, 10);
                                }
                            });
                        } else {
                            addText(content, 10);
                        }
                        yPosition += 8;
                    }
                    
                    // Cover page
                    addText("🚀 PROMPT ENGINEERING MASTERCLASS", 20, true, [99, 102, 241]);
                    yPosition += 5;
                    addText("Complete Interactive Guide to AI Communication", 14, false, [100, 100, 100]);
                    yPosition += 10;
                    addText("TABLE OF CONTENTS", 16, true, [75, 75, 75]);
                    yPosition += 5;
                    
                    const toc = [
                        "Part 1: Foundations & Core Principles",
                        "Part 2: Advanced Crafting Techniques", 
                        "Part 3: C.O.S.T.A.R.S Framework",
                        "Part 4: Chain-of-Thought & Advanced Methods",
                        "Part 5: Real-World Examples Library",
                        "Part 6: Quality Assurance & Best Practices",
                        "Part 7: Common Pitfalls & Solutions",
                        "Part 8: Building Your Prompt Library",
                        "Appendix: Quick Reference Cards"
                    ];
                    
                    toc.forEach((item, index) => {
                        addText(`${index + 1}. ${item}`, 11);
                    });
                    
                    doc.addPage();
                    yPosition = 20;
                    
                    // Main content sections
                    addSection("🔥 PART 1: FOUNDATIONS", [
                        "What is a Prompt?",
                        "A prompt is strategic input (instructions + context) designed to guide Large Language Models toward producing specific, high-quality responses.",
                        "",
                        "Core Principles:",
                        "• Clarity: Be specific about desired outcomes",
                        "• Context: Provide necessary background information", 
                        "• Structure: Organize prompts logically",
                        "• Examples: Show the model what good output looks like",
                        "",
                        "Key Formula: AI + Human Creativity = Exceptional Results"
                    ]);
                    
                    addSection("🎨 PART 2: ADVANCED CRAFTING TECHNIQUES", [
                        "The KISS Principle: Keep It Simple & Structured",
                        "Think of prompting like cooking - you need the right ingredients (context), clear recipe steps (instructions), and iterative refinement (testing).",
                        "",
                        "Professional Approach:",
                        "1. Draft your initial prompt using proven frameworks",
                        "2. Test with your target model and collect outputs", 
                        "3. Analyze results for format, tone, and accuracy",
                        "4. Refine by adding examples, constraints, and personas",
                        "5. Repeat until you achieve consistent high-quality results",
                        "",
                        "Remember: Generic prompts lead to generic answers. Well-organized inputs produce exceptional outputs."
                    ]);
                    
                    addSection("📋 PART 3: C.O.S.T.A.R.S FRAMEWORK", [
                        "The ultimate prompt structure for professional results:",
                        "",
                        "C - CONTEXT: Background information and scope",
                        "O - OBJECTIVE: Clear goal or specific task", 
                        "S - STYLE/ROLE: Persona or expertise level needed",
                        "T - TONE: Communication style (professional, casual, etc.)",
                        "A - AUDIENCE: Who will consume this content",
                        "R - RESPONSE: Desired output format",
                        "S - STEPS: Specific constraints or process requirements"
                    ]);
                    
                    // Add examples on new pages
                    doc.addPage();
                    yPosition = 20;
                    
                    addSection("💡 PROFESSIONAL EXAMPLES", [], true);
                    
                    const examples = [
                        {
                            title: "Business Strategy Example",
                            content: `You are a Senior Product Manager at a Fortune 500 tech company.

Context: AI-powered project management tool for remote teams
Market: North America & Europe, companies 50-500 employees

Objective: Create comprehensive product brief with features, KPIs, pain points, and go-to-market strategy

Style: Executive-level, data-driven
Audience: C-level executives and investors
Format: Executive Summary, Features & KPIs table, Market Analysis
Constraints: Under 2 pages, include 3+ market statistics`
                        },
                        {
                            title: "Educational Content Example",
                            content: `You are an experienced math tutor specializing in calculus.

Context: Student struggling with derivative applications
Problem: Ball thrown upward, find maximum height

Instructions:
1. Show all work step-by-step
2. Explain reasoning behind each step  
3. Use simple language for high school student
4. Include verification and real-world interpretation

Teaching Style: Patient, encouraging, methodical`
                        }
                    ];
                    
                    examples.forEach((example, index) => {
                        if (index > 0) {
                            yPosition += 10;
                        }
                        addText(`Example ${index + 1}: ${example.title}`, 12, true, [16, 185, 129]);
                        yPosition += 5;
                        addText(example.content, 9);
                    });
                    
                    doc.addPage();
                    yPosition = 20;
                    
                    addSection("✅ QUALITY ASSURANCE CHECKLIST", [
                        "Master Quality Checklist:",
                        "□ Clarity: Is the objective crystal clear and unambiguous?",
                        "□ Context: Have you provided sufficient background information?", 
                        "□ Role: Is the AI persona/expertise level specified?",
                        "□ Audience: Is the target audience clearly defined?",
                        "□ Format: Is the desired output format explicitly requested?",
                        "□ Examples: Are there 1-3 high-quality examples provided?",
                        "□ Constraints: Are limitations and requirements specified?",
                        "□ Logic: Is chain-of-thought requested for complex reasoning?",
                        "□ Validation: Have you tested with multiple inputs?",
                        "□ Documentation: Is this saved in your reusable library?"
                    ]);
                    
                    // Add footer to each page
                    const totalPages = doc.internal.getNumberOfPages();
                    for (let i = 1; i <= totalPages; i++) {
                        doc.setPage(i);
                        doc.setFontSize(8);
                        doc.setTextColor(128, 128, 128);
                        doc.text(`Page ${i} of ${totalPages}`, 105, 287, { align: 'center' });
                        doc.text('🚀 Prompt Engineering Masterclass | Professional Guide', 105, 295, { align: 'center' });
                    }
                    
                    // Save the PDF
                    doc.save("Prompt_Engineering_Masterclass_Complete.pdf");
                    
                    showToast('📄 PDF generated successfully! Check your downloads folder.', 'success');
                    
                } catch (error) {
                    console.error('PDF generation error:', error);
                    showToast('Error generating PDF. Please try again.', 'error');
                }
                
                loadingOverlay.classList.remove('active');
                isGenerating = false;
            }, 2000);
        }

        // Technique detail tooltips
        function showTechniqueDetail(technique) {
            const techniques = {
                skeleton: {
                    title: "Skeleton of Thought",
                    description: "Create a basic structure first, then progressively fill in details. Perfect for complex documents and comprehensive analyses."
                },
                tree: {
                    title: "Tree of Thought", 
                    description: "Explore multiple reasoning paths simultaneously. Ideal for complex problem-solving with multiple viable solutions."
                },
                meta: {
                    title: "Meta-Prompting",
                    description: "Create prompts that help generate better prompts. Meta-level thinking for prompt optimization."
                },
                persona: {
                    title: "Multi-Persona",
                    description: "Have multiple experts collaborate on a single problem. Brings diverse perspectives to complex challenges."
                },
                least: {
                    title: "Least-to-Most",
                    description: "Break complex problems into progressively simpler sub-problems. Build solutions bottom-up."
                },
                stepback: {
                    title: "Step-Back Prompting", 
                    description: "Ask broader, higher-level questions to gain better perspective before diving into specifics."
                }
            };
            
            const tech = techniques[technique];
            if (tech) {
                showToast(`💡 ${tech.title}: ${tech.description}`, 'success');
            }
        }

        // Auto-save form data
        function loadFormData() {
            const formInputs = ['context', 'objective', 'style', 'tone', 'audience', 'response', 'steps'];
            formInputs.forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    // Load saved data
                    const saved = localStorage.getItem(`prompt_${id}`);
                    if (saved) {
                        element.value = saved;
                    }
                    
                    // Auto-save on input
                    element.addEventListener('input', () => {
                        localStorage.setItem(`prompt_${id}`, element.value);
                    });
                }
            });
        }

        // Smooth scrolling for internal links
        document.addEventListener('click', function(e) {
            if (e.target.tagName === 'A' && e.target.getAttribute('href') && e.target.getAttribute('href').startsWith('#')) {
                e.preventDefault();
                const target = document.querySelector(e.target.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({ behavior: 'smooth' });
                }
            }
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.ctrlKey || e.metaKey) {
                switch(e.key) {
                    case 'd':
                        e.preventDefault();
                        generateAdvancedPDF();
                        break;
                    case 't':
                        e.preventDefault();
                        toggleTheme();
                        break;
                }
            }
        });

        // Handle section expansion/collapse with smooth animations
        document.addEventListener('DOMContentLoaded', function() {
            const sections = document.querySelectorAll('.section');
            sections.forEach(section => {
                const content = section.querySelector('.section-content');
                if (content) {
                    if (section.classList.contains('expanded')) {
                        content.style.maxHeight = content.scrollHeight + 'px';
                    } else {
                        content.style.maxHeight = '0px';
                    }
                }
            });
        });

        // Update section expansion animation
        const originalToggleSection = toggleSection;
        toggleSection = function(sectionName) {
            const section = document.getElementById(`${sectionName}-section`);
            const content = section.querySelector('.section-content');
            const allSections = document.querySelectorAll('.section');
            const allTabs = document.querySelectorAll('.nav-tab');
            
            // Remove active class from all tabs
            allTabs.forEach(tab => tab.classList.remove('active'));
            
            // Add active class to clicked tab
            const clickedTab = event.target.closest('.nav-tab') || 
                              Array.from(allTabs).find(tab => tab.textContent.toLowerCase().includes(sectionName));
            if (clickedTab) {
                clickedTab.classList.add('active');
            }
            
            if (section.classList.contains('expanded')) {
                // Collapse the section
                content.style.maxHeight = '0px';
                section.classList.remove('expanded');
                section.classList.add('collapsed');
            } else {
                // Collapse all other sections
                allSections.forEach(s => {
                    const otherContent = s.querySelector('.section-content');
                    if (otherContent) {
                        otherContent.style.maxHeight = '0px';
                    }
                    s.classList.remove('expanded');
                    s.classList.add('collapsed');
                });
                
                // Expand the clicked section
                section.classList.remove('collapsed');
                section.classList.add('expanded');
                content.style.maxHeight = content.scrollHeight + 'px';
                
                // Smooth scroll to section
                setTimeout(() => {
                    section.scrollIntoView({ 
                        behavior: 'smooth',
                        block: 'start'
                    });
                }, 100);
            }
        };

    </script>
</body>
</html>